version: 2.1
orbs:
  # Your orb will be automatically injected here during the pipeline.
  # Reference your orb's jobs and commands below as they will exist when built.
  orb-tools: circleci/orb-tools@12.0
  # The orb definition is intentionally not included here. It will be injected into the pipeline.
  atlas-orb: {}

# Use this tag to ensure test jobs always run,
# even though the downstream publish job will only run on release tags.
filters: &filters
  tags:
    only: /.*/

# Filter for release tags.
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  command-test-setup:
    executor: atlas-orb/default
    steps:
      - checkout
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - run:
          name: Check login error message
          command: |
            # Expect an error message because we are already logged in.
            atlas login 2> ./login.stderr || true
            cat ./login.stderr
            # Ensure the login error message is printed.
            grep -qe "Error: already logged in with organization token." ./login.stderr
  command-test-migrate-push:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: sudo cp ./src/scripts/echo.sh /bin/atlas
      - atlas-orb/migrate_push:
          working_directory: testdata
          dir_name: my-cool-project
          dir: "file://migrations"
          tag: << pipeline.git.revision >>
          env: "circleci-test"
          config: "file://atlas.hcl"
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          vars: |
            foo=bar baz=qux quux=corge
      - run:
          name: Check echo.out for expected output
          command: |
            cat /tmp/echo.out
            # Ensure "migrate push" was called twice with the expected arguments.
            if [ $(grep -c "migrate push" /tmp/echo.out) -ne 2 ]
            then
              echo ERROR: expected two "migrate push" commands >&2
              exit 1
            fi
            # Should include push with the git revision and latest tag.
            grep -qe "my-cool-project:<< pipeline.git.revision >>" /tmp/echo.out
            grep -qe "my-cool-project:latest" /tmp/echo.out
            # Should include the dev URL.
            grep -qe "--dev-url postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/echo.out
            # Should include the environment.
            grep -qe "--env circleci-test" /tmp/echo.out
            # Should include the config.
            grep -qe "--config file://atlas.hcl" /tmp/echo.out
            # Should include the vars.
            grep -qe "--var foo=bar --var baz=qux --var quux=corge" /tmp/echo.out
  command-test-migrate-lint:
      executor: atlas-orb/default
      steps:
        - checkout
        - run:
            name: Mock atlas with echo.sh
            command: |
              sudo cp ./src/scripts/echo.sh /bin/atlas
              sudo cp ./src/scripts/echo.sh /bin/atlasaction
        - atlas-orb/migrate_lint:
            working_directory: testdata
            dir_name: my-cool-project
            dir: "file://migrations"
            env: "circleci-test"
            config: "file://atlas.hcl"
            dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
            vars: |
              foo=bar baz=qux quux=corge
        - run:
            name: Check echo.out for expected output
            command: |
              grep -qe "--action migrate/lint" /tmp/echo.out
              # check dir_name should be set in the environment
              grep -qe "INPUT_DIR_NAME=my-cool-project" /tmp/env.out
              # check dir should be set in the environment
              grep -qe "INPUT_DIR=file://migrations" /tmp/env.out
              # check dev_url should be set in the environment
              grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
              # check env should be set in the environment
              grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
              # check config should be set in the environment
              grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
              # check vars should be set in the environment
              grep -qe "INPUT_VARS=foo=bar baz=qux quux=corge" /tmp/env.out
  integration-test:
    docker:
      - image: cimg/base:current
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          POSTGRES_PASSWORD: pass
    steps:
      - checkout
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          repo_url: "https://github.com/ariga/atlas-orb"
      - atlas-orb/migrate_push:
          working_directory: testdata
          dir_name: my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
  integration-test-lint:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - run:
          name: Run atlasaction with migrate-lint-fail.sh
          command: |
            sudo cp /bin/atlasaction /bin/atlasaction-origin
            sudo cp ./src/scripts/migrate-lint-fail.sh /bin/atlasaction
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: test-dir-sqlite
          dir: "file://sqlite-broken-file"
          dev_url: "sqlite://file.db?mode=memory"
          repo_url: "https://github.com/ariga/atlas-orb"
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: test-dir-sqlite
          dir: "file://sqlite-destructive"
          dev_url: "sqlite://file.db?mode=memory"
          repo_url: "https://github.com/ariga/atlas-orb"
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: test-dir-sqlite
          dir: "file://sqlite-wrong-sum"
          dev_url: "sqlite://file.db?mode=memory"
          repo_url: "https://github.com/ariga/atlas-orb"
workflows:
  test-deploy:
    jobs:
      - command-test-setup:
          context: ariga-atlas
          filters: *filters
      - command-test-migrate-push:
          filters: *filters
      - command-test-migrate-lint:
          filters: *filters
      - integration-test:
          context: ariga-atlas
          filters: *filters
          requires:
            - command-test-setup
            - command-test-migrate-push
            - command-test-migrate-lint
      - integration-test-lint:
          context: ariga-atlas
          filters: *filters
          requires:
            - command-test-setup
            - command-test-migrate-push
            - command-test-migrate-lint
      # The orb must be re-packed for publishing, and saved to the workspace.
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: ariga/atlas-orb
          vcs_type: github
          pub_type: production
          # Ensure this job requires all test jobs and the pack job.
          requires:
            - orb-tools/pack
            - command-test-setup
            - command-test-migrate-push
            - command-test-migrate-lint
          context: orb-publisher
          filters: *release-filters
