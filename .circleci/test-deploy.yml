version: 2.1
orbs:
  # Your orb will be automatically injected here during the pipeline.
  # Reference your orb's jobs and commands below as they will exist when built.
  orb-tools: circleci/orb-tools@12.0
  # The orb definition is intentionally not included here. It will be injected into the pipeline.
  atlas-orb: {}

# Use this tag to ensure test jobs always run,
# even though the downstream publish job will only run on release tags.
filters: &filters
  tags:
    only: /.*/

# Filter for release tags.
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  command-test-setup:
    executor: atlas-orb/default
    steps:
      - checkout
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - run:
          name: Check login error message
          command: |
            # Expect an error message because we are already logged in.
            atlas login 2> ./login.stderr || true
            cat ./login.stderr
            # Ensure the login error message is printed.
            grep -qe "Error: already logged in with organization token." ./login.stderr
  command-test-migrate-push:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/migrate_push:
          working_directory: testdata
          dir_name: my-cool-project
          dir: "file://migrations"
          tag: << pipeline.git.revision >>
          env: "circleci-test"
          config: "file://atlas.hcl"
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            # check dir_name should be set in the environment
            grep -qe "INPUT_DIR_NAME=my-cool-project" /tmp/env.out
            # check tag should be set in the environment
            grep -qe "INPUT_TAG=<< pipeline.git.revision >>" /tmp/env.out
            # check tag latest should be set in the environment
            grep -qe "INPUT_TAG=latest" /tmp/env.out
            # check dir should be set in the environment
            grep -qe "INPUT_DIR=file://migrations" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-migrate-lint:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: my-cool-project
          dir: "file://migrations"
          env: "circleci-test"
          config: "file://atlas.hcl"
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action migrate/lint" /tmp/echo.out
            # check dir_name should be set in the environment
            grep -qe "INPUT_DIR_NAME=my-cool-project" /tmp/env.out
            # check dir should be set in the environment
            grep -qe "INPUT_DIR=file://migrations" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-migrate-apply:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/migrate_apply:
          working_directory: testdata
          dir: "file://migrations"
          env: "circleci-test"
          config: "file://atlas.hcl"
          url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          dry_run: true
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            # check dir should be set in the environment
            grep -qe "INPUT_DIR=file://migrations" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check dry_run should be set in the environment
            grep -qe "INPUT_DRY_RUN=1" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-migrate-down:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/migrate_down:
          working_directory: testdata
          url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          dir: "file://migrations"
          config: "file://atlas.hcl"
          dev_url: postgres://postgres:pass@localhost:5432/dev?sslmode=disable
          env: "circleci-test"
          amount: 1
          to_tag: "tag"
          to_version: "version"
          wait_interval: "2s"
          wait_timeout: "2m"
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action migrate/down" /tmp/echo.out
            # check url should be set in the environment
            grep -qe "INPUT_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check dir should be set in the environment
            grep -qe "INPUT_DIR=file://migrations" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/dev?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check amount should be set in the environment
            grep -qe "INPUT_AMOUNT=1" /tmp/env.out
            # check to_tag should be set in the environment
            grep -qe "INPUT_TO_TAG=tag" /tmp/env.out
            # check to_version should be set in the environment
            grep -qe "INPUT_TO_VERSION=version" /tmp/env.out
            # check wait_interval should be set in the environment
            grep -qe "INPUT_WAIT_INTERVAL=2s" /tmp/env.out
            # check wait_timeout should be set in the environment
            grep -qe "INPUT_WAIT_TIMEOUT=2m" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-migrate-test:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/migrate_test:
          working_directory: testdata
          dir: "file://migrations"
          run: "example"
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          env: "circleci-test"
          config: "file://atlas.hcl"
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action migrate/test" /tmp/echo.out
            # check dir should be set in the environment
            grep -qe "INPUT_DIR=file://migrations" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check run should be set in the environment
            grep -qe "INPUT_RUN=example" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-schema-test:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/schema_test:
          working_directory: testdata
          url: "file://schema.hcl"
          run: "example"
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          env: "circleci-test"
          config: "file://atlas.hcl"
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action schema/test" /tmp/echo.out
            # check url should be set in the environment
            grep -qe "INPUT_URL=file://schema.hcl" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check run should be set in the environment
            grep -qe "INPUT_RUN=example" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-schema-push:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/schema_push:
          working_directory: testdata
          schema_name: "my-cool-project"
          tag: "tag"
          latest: true
          url: "postgres://postgres:pass@localhost:5432/test?sslmode=disable"
          dev_url: "postgres://postgres:pass@localhost:5432/dev?sslmode=disable"
          env: "circleci-test"
          config: "file://atlas.hcl"
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action schema/push" /tmp/echo.out
            # check schema_name should be set in the environment
            grep -qe "INPUT_SCHEMA_NAME=my-cool-project" /tmp/env.out
            # check tag should be set in the environment
            grep -qe "INPUT_TAG=tag" /tmp/env.out
            # check latest should be set in the environment
            grep -qe "INPUT_LATEST=1" /tmp/env.out
            # check url should be set in the environment
            grep -qe "INPUT_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/dev?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-schema-plan:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/schema_plan:
          working_directory: testdata/schema-plan
          schema_name: "my-cool-project"
          plan_name: "my-plan"
          from: "atlas://my-cool-project?tag=latest"
          to: "file://schema.hcl"
          dev_url: "postgres://postgres:pass@localhost:5432/dev?sslmode=disable"
          env: "circleci-test"
          config: "file://atlas.hcl"
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action schema/plan" /tmp/echo.out
            # check schema_name should be set in the environment
            grep -qe "INPUT_SCHEMA_NAME=my-cool-project" /tmp/env.out
            # check plan_name should be set in the environment
            grep -qe "INPUT_NAME=my-plan" /tmp/env.out
            # check from should be set in the environment
            grep -qe "INPUT_FROM=atlas://my-cool-project?tag=latest" /tmp/env.out
            # check to should be set in the environment
            grep -qe "INPUT_TO=file://schema.hcl" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/dev?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-schema-plan-approve:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/schema_plan_approve:
          working_directory: testdata/schema-plan
          schema_name: "my-cool-project"
          plan: "my-plan"
          from: "atlas://my-cool-project?tag=latest"
          to: "file://schema.hcl"
          dev_url: "postgres://postgres:pass@localhost:5432/dev?sslmode=disable"
          env: "circleci-test"
          config: "file://atlas.hcl"
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action schema/plan/approve" /tmp/echo.out
            # check schema_name should be set in the environment
            grep -qe "INPUT_SCHEMA_NAME=my-cool-project" /tmp/env.out
            # check plan_name should be set in the environment
            grep -qe "INPUT_PLAN=my-plan" /tmp/env.out
            # check from should be set in the environment
            grep -qe "INPUT_FROM=atlas://my-cool-project?tag=latest" /tmp/env.out
            # check to should be set in the environment
            grep -qe "INPUT_TO=file://schema.hcl" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/dev?sslmode=disable" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  command-test-schema-apply:
    executor: atlas-orb/default
    steps:
      - checkout
      - run:
          name: Mock atlas with echo.sh
          command: |
            sudo cp ./src/scripts/echo.sh /bin/atlas
            sudo cp ./src/scripts/echo.sh /bin/atlasaction
      - atlas-orb/schema_apply:
          working_directory: testdata/schema-apply
          to: "file://schema.hcl"
          plan: "atlas://my-cool-project/plans/id"
          url: "postgres://postgres:pass@localhost:5432/test?sslmode=disable"
          dev_url: "postgres://postgres:pass@localhost:5432/dev?sslmode=disable"
          auto_approve: true
          env: "circleci-test"
          config: "file://atlas.hcl"
          vars: '{"foo": "bar", "baz": "qux", "quux": "corge"}'
      - run:
          name: Check echo.out for expected output
          command: |
            grep -qe "--action schema/apply" /tmp/echo.out
            # check schema_name should be set in the environment
            grep -qe "INPUT_TO=file://schema.hcl" /tmp/env.out
            # check plan should be set in the environment
            grep -qe "INPUT_PLAN=atlas://my-cool-project/plans/id" /tmp/env.out
            # check url should be set in the environment
            grep -qe "INPUT_URL=postgres://postgres:pass@localhost:5432/test?sslmode=disable" /tmp/env.out
            # check dev_url should be set in the environment
            grep -qe "INPUT_DEV_URL=postgres://postgres:pass@localhost:5432/dev?sslmode=disable" /tmp/env.out
            # check auto_approve should be set in the environment
            grep -qe "INPUT_AUTO_APPROVE=1" /tmp/env.out
            # check env should be set in the environment
            grep -qe "INPUT_ENV=circleci-test" /tmp/env.out
            # check config should be set in the environment
            grep -qe "INPUT_CONFIG=file://atlas.hcl" /tmp/env.out
            # check vars should be set in the environment
            grep -qe "INPUT_VARS={\"foo\": \"bar\", \"baz\": \"qux\", \"quux\": \"corge\"}" /tmp/env.out
  integration-test-versioned:
    docker:
      - image: cimg/base:current
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          POSTGRES_PASSWORD: pass
    steps:
      - checkout
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 60s
      - run:
          name: Create "dev" database
          command: |
            psql postgres://postgres:pass@localhost:5432 -c "CREATE DATABASE dev;"
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - atlas-orb/migrate_test:
          working_directory: testdata
          run: "expected_success"
          dir: atlas://my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?search_path=public&sslmode=disable
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
      - atlas-orb/migrate_push:
          working_directory: testdata
          dir_name: my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
      - atlas-orb/migrate_apply:
          working_directory: testdata
          dir: atlas://my-cool-project
          url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
      - atlas-orb/migrate_down:
          working_directory: testdata
          url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          dir: "file://migrations"
          dev_url: postgres://postgres:pass@localhost:5432/dev?sslmode=disable
          amount: 1
  integration-test-declarative:
    docker:
      - image: cimg/base:current
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          POSTGRES_PASSWORD: pass
    steps:
      - checkout
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 60s
      - run:
          name: Create "dev" database
          command: |
            psql postgres://postgres:pass@localhost:5432 -c "CREATE DATABASE dev;"
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - atlas-orb/schema_test:
          working_directory: testdata
          run: "expected_success"
          url: "file://schema.hcl"
          dev_url: postgres://postgres:pass@localhost:5432/test?search_path=public&sslmode=disable
  integration-test-versioned-gh:
    docker:
      - image: cimg/base:current
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          POSTGRES_PASSWORD: pass
    environment:
      GITHUB_REPOSITORY: "ariga/atlas-orb"
    steps:
      - checkout
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 60s
      - run:
          name: Create "dev" database
          command: |
            psql postgres://postgres:pass@localhost:5432 -c "CREATE DATABASE dev;"
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - atlas-orb/migrate_test:
          working_directory: testdata
          run: "expected_success"
          dir: atlas://my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?search_path=public&sslmode=disable
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
      - atlas-orb/migrate_push:
          working_directory: testdata
          dir_name: my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
      - atlas-orb/migrate_apply:
          working_directory: testdata
          dir: atlas://my-cool-project
          url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
      - atlas-orb/migrate_down:
          working_directory: testdata
          url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
          dir: "file://migrations"
          dev_url: postgres://postgres:pass@localhost:5432/dev?sslmode=disable
          amount: 1
  integration-test-versioned-gh-lint:
    docker:
      - image: cimg/base:current
    environment:
      GITHUB_REPOSITORY: "ariga/atlas-orb"
    steps:
      - checkout
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - run:
          name: Run atlasaction with migrate-lint-fail.sh
          command: |
            sudo cp /bin/atlasaction /bin/atlasaction-origin
            sudo cp ./src/scripts/migrate-lint-fail.sh /bin/atlasaction
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: test-dir-sqlite
          dir: "file://sqlite-broken-file"
          dev_url: "sqlite://file.db?mode=memory"
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: test-dir-sqlite
          dir: "file://sqlite-destructive"
          dev_url: "sqlite://file.db?mode=memory"
      - atlas-orb/migrate_lint:
          working_directory: testdata
          dir_name: test-dir-sqlite
          dir: "file://sqlite-wrong-sum"
          dev_url: "sqlite://file.db?mode=memory"
  integration-test-versioned-gh-test:
    docker:
      - image: cimg/base:current
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          POSTGRES_PASSWORD: pass
    environment:
      GITHUB_REPOSITORY: "ariga/atlas-orb"
    steps:
      - checkout
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 60s
      - run:
          name: Create "dev" database
          command: |
            psql postgres://postgres:pass@localhost:5432 -c "CREATE DATABASE dev;"
      - atlas-orb/setup:
          version: "latest"
          cloud_token_env: "ATLAS_TOKEN"
      - run:
          name: Run atlasaction with migrate-test-fail.sh
          command: |
            sudo cp /bin/atlasaction /bin/atlasaction-origin
            sudo cp ./src/scripts/migrate-test-fail.sh /bin/atlasaction
      - atlas-orb/migrate_test:
          working_directory: testdata
          run: "expected_failure"
          dir: atlas://my-cool-project
          dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
  integration-test-declarative-gh:
      docker:
        - image: cimg/base:current
        - image: cimg/postgres:16.2
          environment:
            POSTGRES_USER: postgres
            POSTGRES_DB: test
            POSTGRES_PASSWORD: pass
      environment:
        GITHUB_REPOSITORY: "ariga/atlas-orb"
      steps:
        - checkout
        - run:
            name: Wait for Postgres
            command: dockerize -wait tcp://localhost:5432 -timeout 60s
        - run:
            name: Create "dev" database
            command: |
              psql postgres://postgres:pass@localhost:5432 -c "CREATE DATABASE dev;"
        - atlas-orb/setup:
            version: "latest"
            cloud_token_env: "ATLAS_TOKEN"
        - atlas-orb/schema_push:
            working_directory: testdata/schema-plan
            schema_name: "circleci-schema-test"
            tag: "latest"
            url: "postgres://postgres:pass@localhost:5432/test?sslmode=disable"
            dev_url: postgres://postgres:pass@localhost:5432/dev?sslmode=disable
        - atlas-orb/schema_plan:
            working_directory: testdata/schema-plan
            schema_name: "circleci-schema-test"
            from: "atlas://circleci-schema-test?tag=latest"
            to: "file://schema.hcl"
            plan_name: << pipeline.git.revision >>
            dev_url: postgres://postgres:pass@localhost:5432/dev?sslmode=disable
            vars: '{"comment": "<< pipeline.git.revision >>"}'
        - run:
            name: Aprrove schema plan before apply
            command: |
              atlas schema plan approve --url atlas://circleci-schema-test/plans/<< pipeline.git.revision >>
        - atlas-orb/schema_apply:
            working_directory: testdata/schema-plan
            to: "file://schema.hcl"
            plan: "atlas://circleci-schema-test/plans/<< pipeline.git.revision >>"
            url: "postgres://postgres:pass@localhost:5432/test?sslmode=disable"
            dev_url: "postgres://postgres:pass@localhost:5432/dev?sslmode=disable"
            auto_approve: true
            vars: '{"comment": "<< pipeline.git.revision >>"}'
  integration-test-declarative-gh-test:
      docker:
        - image: cimg/base:current
        - image: cimg/postgres:16.2
          environment:
            POSTGRES_USER: postgres
            POSTGRES_DB: test
            POSTGRES_PASSWORD: pass
      environment:
        GITHUB_REPOSITORY: "ariga/atlas-orb"
      steps:
        - checkout
        - run:
            name: Wait for Postgres
            command: dockerize -wait tcp://localhost:5432 -timeout 60s
        - run:
            name: Create "dev" database
            command: |
              psql postgres://postgres:pass@localhost:5432 -c "CREATE DATABASE dev;"
        - atlas-orb/setup:
            version: "latest"
            cloud_token_env: "ATLAS_TOKEN"
        - run:
            name: Run atlasaction with schema-test-fail.sh
            command: |
              sudo cp /bin/atlasaction /bin/atlasaction-origin
              sudo cp ./src/scripts/schema-test-fail.sh /bin/atlasaction
        - atlas-orb/schema_test:
            working_directory: testdata
            run: "expected_failure"
            url: file://schema.hcl
            dev_url: postgres://postgres:pass@localhost:5432/test?sslmode=disable
workflows:
  test-deploy:
    jobs:
      - command-test-setup:
          context: ariga-atlas
          filters: *filters
      - command-test-migrate-push:
          filters: *filters
      - command-test-migrate-test:
          filters: *filters
      - command-test-migrate-lint:
          filters: *filters
      - command-test-migrate-apply:
          filters: *filters
      - command-test-migrate-down:
          filters: *filters
      - command-test-schema-test:
          filters: *filters
      - command-test-schema-push:
          filters: *filters
      - command-test-schema-plan:
          filters: *filters
      - command-test-schema-plan-approve:
          filters: *filters
      - command-test-schema-apply:
          filters: *filters
      - integration-test-versioned:
          context: ariga-atlas
          filters: *filters
          requires:
            - command-test-setup
            - command-test-migrate-push
            - command-test-migrate-test
            - command-test-migrate-lint
            - command-test-migrate-apply
            - command-test-migrate-down
      - integration-test-versioned-gh:
          context: ariga-atlas-gh
          filters: *filters
          requires:
            - command-test-setup
            - command-test-migrate-push
            - command-test-migrate-test
            - command-test-migrate-lint
            - command-test-migrate-apply
            - command-test-migrate-down
      - integration-test-versioned-gh-lint:
          context: ariga-atlas-gh
          filters: *filters
          requires:
            - command-test-setup
            - command-test-migrate-lint
      - integration-test-versioned-gh-test:
          context: ariga-atlas-gh
          filters: *filters
          requires:
            - command-test-setup
            - command-test-migrate-test
      - integration-test-declarative:
          context: ariga-atlas
          filters: *filters
          requires:
            - command-test-setup
            - command-test-schema-test
            - command-test-schema-push
      - integration-test-declarative-gh:
          context: ariga-atlas-gh
          filters: *filters
          requires:
            - command-test-setup
            - command-test-schema-test
            - command-test-schema-push
            - command-test-schema-plan
            - command-test-schema-plan-approve
            - command-test-schema-apply
      - integration-test-declarative-gh-test:
          context: ariga-atlas-gh
          filters: *filters
          requires:
            - command-test-setup
            - command-test-schema-test
      # The orb must be re-packed for publishing, and saved to the workspace.
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: ariga/atlas-orb
          vcs_type: github
          pub_type: production
          # Ensure this job requires all test jobs and the pack job.
          requires:
            - orb-tools/pack
            - command-test-setup
            - command-test-migrate-push
            - command-test-migrate-test
            - command-test-migrate-lint
            - command-test-migrate-apply
            - command-test-migrate-down
            - command-test-schema-test
          context: orb-publisher
          filters: *release-filters
